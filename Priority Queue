#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    int priority;
    struct Node* next;
};

struct Node* front = NULL;

void enqueue(int value, int priority) 
{
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->priority = priority;
    newNode->next = NULL;

    if (front == NULL || priority < front->priority) 
    {
        newNode->next = front;
        front = newNode;
    } 
    else 
    {
        struct Node* temp = front;
        while (temp->next != NULL && temp->next->priority <= priority) {
            temp = temp->next;
        }
        newNode->next = temp->next;
        temp->next = newNode;
    }
}

void dequeue() 
{
    if (front == NULL) 
    {
        printf("Priority Queue is empty!\n");
        return;
    }
    struct Node* temp = front;
    front = front->next;
    free(temp);
}

void displayPriorityQueue() 
{
    struct Node* temp = front;
    if (temp == NULL) 
    {
        printf("Priority Queue is empty!\n");
        return;
    }
    while (temp) 
    {
        printf("%d(priority: %d) -> ", temp->data, temp->priority);
        temp = temp->next;
    }
    printf("NULL\n");
}

int main() 
{
    int choice, value, priority;
    do 
    {
        printf("\nMenu:\n1. Enqueue\n2. Dequeue\n3. Display\n4. Exit\nEnter choice: ");
        scanf("%d", &choice);
        switch (choice) 
        {
            case 1:
                printf("Enter value to enqueue: ");
                scanf("%d", &value);
                printf("Enter priority (lower number = higher priority): ");
                scanf("%d", &priority);
                enqueue(value, priority);
                break;
                
            case 2:
                dequeue();
                break;
                
            case 3:
                displayPriorityQueue();
                break;
                
            case 4:
                printf("Exiting...\n");
                break;
            default:
                printf("Invalid choice!\n");
        }
    }
    while (choice != 4);
    return 0;
}
