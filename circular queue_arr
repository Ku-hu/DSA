#include<stdio.h>
#define MAX 5
struct queue
{
	int front,rear,a[MAX];
} q;
void display();

void enqueue()
{
	int n;
	if((q.rear+1)%MAX==q.front)
		printf("\nQueue is full");
	else
	{
		printf("\nEnter the element:");
		scanf("%d",&n);
		if(q.rear==-1 && q.front==-1)
		{
			q.front=0;
			q.rear=0;
		}
		else
		{
			q.rear=(q.rear+1)%MAX;
		}
		q.a[q.rear]=n;
		display();
	}
}

void dequeue()
{
	int n;
	if(q.rear==-1 && q.front==-1)
		printf("\nqueue is Empty");
	else
	{
		n=q.a[q.front];
		printf("\nDeleted element:%d",n);
		if(q.rear==q.front)
		{
			q.rear=-1,q.front=-1;
		}
		else
		{
			q.front=(q.front+1)%MAX;
		}
	}
}

void display()
{
	if(q.rear==-1 && q.front==-1)
		printf("\nqueue is Empty");
	else
	{
		int i=q.front;
		printf("\nCircular queue elements:\n");
		while( i!=q.rear)
		{
			printf("%d\n",q.a[i]);
			i=(i+1)%MAX;
		}
		printf("%d",q.a[i]);
	}
}

int main()
{
	int choice=0;
	q.front=-1,q.rear=-1;
	while(choice!=4)
	{
		printf("\n1.Enqueue\n2.Dequeue\n3.Display\n4.Exit\nEnter your choice:");
		scanf("%d",&choice);
		switch(choice)
		{
		case 1:
			enqueue();
			break;
		case 2:
			dequeue();
			break;
		case 3:
			display();
			break;
		case 4:
			printf("\nExiting");
			break;
		default:
			printf("\nInvalid choice");
			break;
		}
	}
}
